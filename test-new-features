#!/bin/bash
# Test script for newly implemented transcript processing features

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_message() {
  local color=$1
  local message=$2
  echo -e "${color}${message}${NC}"
}

# Function to print help
print_help() {
  echo "Usage: $0 [options]"
  echo ""
  echo "Test script for transcript processing features."
  echo ""
  echo "Options:"
  echo "  --small                   Test with small audio file"
  echo "  --medium                  Test with medium audio file"
  echo "  --large                   Test with large audio file"
  echo "  --text <file>             Test with text file"
  echo "  --audio <file>            Test with custom audio file"
  echo "  --output <file>           Output file path"
  echo "  --no-parallel             Disable parallel processing test"
  echo "  --no-cache                Disable cache test"
  echo "  --no-content-aware        Disable content-aware processing test"
  echo "  --test-analyzer           Test content analyzer"
  echo "  --no-post-processing      Skip post-processing (transcription only)"
  echo "  --context <context>       Provide context for processing"
  echo "  --model <model>           Model for post-processing (default: gpt-4o)"
  echo "  --transcribe-model <model> Model for transcription (default: whisper-1)"
  echo "  --max-chunk-size <size>   Maximum chunk size (default: 3000)"
  echo "  --max-workers <workers>   Maximum number of workers"
  echo "  --verbose                 Enable verbose logging"
  echo "  --help                    Display this help message"
  exit 0
}

# Parse command line arguments
declare ARGS=()
declare AUDIO_SIZE=""
declare TEXT_FILE=""
declare AUDIO_FILE=""
declare OUTPUT_FILE=""
declare PARALLEL=true
declare CACHE=true
declare CONTENT_AWARE=true
declare TEST_ANALYZER=false
declare NO_POST_PROCESSING=false
declare CONTEXT=""
declare MODEL="gpt-4o"
declare TRANSCRIBE_MODEL="whisper-1"
declare MAX_CHUNK_SIZE=3000
declare MAX_WORKERS=""
declare VERBOSE=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --small)
      AUDIO_SIZE="--small"
      shift
      ;;
    --medium)
      AUDIO_SIZE="--medium"
      shift
      ;;
    --large)
      AUDIO_SIZE="--large"
      shift
      ;;
    --text)
      TEXT_FILE="--text $2"
      shift 2
      ;;
    --audio)
      AUDIO_FILE="--audio $2"
      shift 2
      ;;
    --output)
      OUTPUT_FILE="--output $2"
      shift 2
      ;;
    --no-parallel)
      PARALLEL=false
      shift
      ;;
    --no-cache)
      CACHE=false
      shift
      ;;
    --no-content-aware)
      CONTENT_AWARE=false
      shift
      ;;
    --test-analyzer)
      TEST_ANALYZER=true
      shift
      ;;
    --no-post-processing)
      NO_POST_PROCESSING=true
      shift
      ;;
    --context)
      CONTEXT="--context \"$2\""
      shift 2
      ;;
    --model)
      MODEL="$2"
      shift 2
      ;;
    --transcribe-model)
      TRANSCRIBE_MODEL="$2"
      shift 2
      ;;
    --max-chunk-size)
      MAX_CHUNK_SIZE=$2
      shift 2
      ;;
    --max-workers)
      MAX_WORKERS="--max-workers $2"
      shift 2
      ;;
    --verbose)
      VERBOSE=true
      shift
      ;;
    --help)
      print_help
      ;;
    *)
      ARGS+=("$1")
      shift
      ;;
  esac
done

# Build the command
COMMAND="python3 test_implementation.py"

# Add test size if specified
if [[ -n "$AUDIO_SIZE" ]]; then
  COMMAND="$COMMAND $AUDIO_SIZE"
fi

# Add input files if specified
if [[ -n "$TEXT_FILE" ]]; then
  COMMAND="$COMMAND $TEXT_FILE"
fi

if [[ -n "$AUDIO_FILE" ]]; then
  COMMAND="$COMMAND $AUDIO_FILE"
fi

# Add output file if specified
if [[ -n "$OUTPUT_FILE" ]]; then
  COMMAND="$COMMAND $OUTPUT_FILE"
fi

# Add feature flags
if [[ "$PARALLEL" == true ]]; then
  COMMAND="$COMMAND --test-parallel"
fi

if [[ "$CACHE" == true ]]; then
  COMMAND="$COMMAND --test-cache"
fi

if [[ "$CONTENT_AWARE" == true ]]; then
  COMMAND="$COMMAND --test-content-aware"
fi

if [[ "$TEST_ANALYZER" == true ]]; then
  COMMAND="$COMMAND --test-analyzer"
fi

if [[ "$NO_POST_PROCESSING" == true ]]; then
  COMMAND="$COMMAND --no-post-processing"
fi

# Add configuration options
if [[ -n "$CONTEXT" ]]; then
  COMMAND="$COMMAND $CONTEXT"
fi

if [[ -n "$MODEL" ]]; then
  COMMAND="$COMMAND --model $MODEL"
fi

if [[ -n "$TRANSCRIBE_MODEL" ]]; then
  COMMAND="$COMMAND --transcribe-model $TRANSCRIBE_MODEL"
fi

if [[ -n "$MAX_CHUNK_SIZE" ]]; then
  COMMAND="$COMMAND --max-chunk-size $MAX_CHUNK_SIZE"
fi

if [[ -n "$MAX_WORKERS" ]]; then
  COMMAND="$COMMAND $MAX_WORKERS"
fi

if [[ "$VERBOSE" == true ]]; then
  COMMAND="$COMMAND --verbose"
fi

# Add any remaining arguments
if [[ ${#ARGS[@]} -gt 0 ]]; then
  for arg in "${ARGS[@]}"; do
    COMMAND="$COMMAND $arg"
  done
fi

# Print test configuration
print_message "$BLUE" "=== Transcript Processing Test ==="
print_message "$BLUE" "Command: $COMMAND"
echo ""

# Execute the command
eval "$COMMAND"
exit_code=$?

# Print result
if [[ $exit_code -eq 0 ]]; then
  print_message "$GREEN" "Test completed successfully!"
else
  print_message "$RED" "Test failed with exit code $exit_code"
fi

exit $exit_code

#fin